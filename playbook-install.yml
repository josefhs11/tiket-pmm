---
- hosts: localhost
  become: yes
  gather_facts: yes

  tasks:
    - name: Downloads Packages
      apt:
        deb: https://downloads.percona.com/downloads/percona-release/percona-release-1.0-9/ubuntu/percona-release_1.0-9.generic_all.deb

    - name: Packages                   | Update OS
      apt:
      update_cache: yes
      cache_valid_time: 3600

    - name: Install screen
      apt: pkg=screen state=latest

    - name: Install supervisor
      apt: pkg=supervisor state=latest

    - name: Install logrotate
      apt: pkg=logrotate state=latest

    - name: Install logrotate
      apt: pkg=nginx state=latest

    - name: Adding pmm group
      group:
        name: pmm
        gid: 1000
        state: present

    - name: Adding pmm user
      user:
        name: pmm
        uid: 1000
        groups: pmm
        append: yes

#    - name: Percona Server for MySQL   | Install Percona Client
#      when: ansible_os_family == 'RedHat'
#      yum: 
#        name: "{{ items }}"
#        state: installed
#      vars:
#        items:
#          - Percona-Server-client-55

#    - name: Percona Server for MySQL   | Remove MariaDB Client
#      when: ansible_os_family == 'RedHat'
#      yum: 
#        name: "{{ items }}"
#        state: absent
#      vars:
#        items:
#          - mariadb-libs

#    - name: Percona Server for MySQL   | Install Percona Server
#      apt: 
#        name: "{{ item }}" 
#        state: present 
#       with_items: 
#         - Percona-Server-server-55
#         - MySQL-python
#
#    - name: Percona Server for MySQL   | stat /root/.my.cnf
#      stat: path=/root/.my.cnf
#      register: root_mycnf_file
#
#    - name: Percona Server for MySQL   | Add password generator script
#      when: not root_mycnf_file.stat.exists
#      copy:
#        content: |
#          #!/bin/sh
#
#          TEMP_PASS=$(grep 'temporary password' /var/log/mysqld.log  | sed -e 's/.*localhost: //' | tail -1)
#          NEW_PASS=$(dd if=/dev/urandom bs=1 count=256 2>/dev/null | tr -cd '[:alnum:],.!@#$%^&*' | head -c32)
#          mysql "-p${TEMP_PASS}" --connect-expired-password -e "SET PASSWORD = PASSWORD('$NEW_PASS');"
#          echo "[client]
#          password = '$NEW_PASS'" > /root/.my.cnf
#          echo "
#          ++++++++++++++++++++++++++ Percona Server for MySQL ++++++++++++++++++++++++++
#            Setting password for root@localhost user: $NEW_PASS
#          ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#          " | tee -a /var/log/mysqld.log
#        dest: /var/lib/cloud/scripts/per-once/init-mysql-password
#        mode: 0755

#    - name: PMM                        | Create grafana group
#      group:
#        gid: 996
#        name: grafana
#
#    - name: PMM                        | Create grafana user
#      user:
#        uid: 996
#        name: grafana
#        group: grafana
#        home: /etc/grafana
#        shell: /sbin/nologin

    - name: PMM                        | Add PMM Server YUM repository
      when: ansible_os_family == 'RedHat'
      yum_repository:
        name: pmm
        description: PMM Server YUM repository - x86_64
        baseurl: https://repo.percona.com/pmm/7/RPMS/x86_64/
        gpgcheck: yes
        enabled: no
        gpgkey: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-Percona

    - name: PMM                        | Add local YUM repository
      yum_repository:
        name: local
        description: Local YUM repository - x86_64
        baseurl: https://repo.percona.com/pmm/7/RPMS/x86_64
        gpgcheck: no
        enabled: no

    - name: PMM                        | Install RPMs
      shell: rpm -U '{{ item }}'
      vars:
        items:
          - nginx
#          - percona-consul-0.8.5-1.el7.x86_64
#          - percona-grafana-5.1.3-5.el7.x86_64
#          - percona-prometheus-2.3.2-1.el7.x86_64
#          - percona-prometheus1-1.8.2-4.el7.x86_64
#          - percona-orchestrator-3.0.6-1.gita77ee00.el7.x86_64
          - percona-qan-api-1.16.0-3.1810230935.64366fb.el7.x86_64
          - percona-qan-app-1.16.0-3.1810310940.1914f99.el7.noarch
          - percona-toolkit-3.0.10
          - percona-dashboards-1.16.0-5.1810291731.e0d5f62.el7.noarch
          - pmm-server-1.16.0-12.1810231532.5f2c8a7.el7.noarch
          - pmm-client-1.16.0-1.el7.x86_64
          - pmm-manage-1.16.0-1.1810230930.9251bed.el7.x86_64
          - pmm-managed-1.16.0-2.1810311301.e302d8e.el7.x86_64
          - pmm-update-1.16.0-1.1810230937.4edb3b9.el7.noarch
          - rds_exporter-1.16.0-1.1810230937.e71e0f3.el7.x86_64

    - name: PMM                        | Fix nginx config
      replace:
        dest: /etc/nginx/nginx.conf
        regexp: '^(\s*)listen'
        replace: '\1#listen'

    - name: NGINX SSL Certificate      | Add script
      copy:
        content: |
          #!/bin/sh

          set -o errexit

          mkdir -p /srv/nginx

          if [ ! -e /srv/nginx/dhparam.pem ]; then
              openssl dhparam -out /srv/nginx/dhparam.pem 2048
          fi

          if [ ! -e /srv/nginx/ca-certs.pem ]; then
              # Fetch letsencrypt chain
              curl https://letsencrypt.org/certs/isrgrootx1.pem                          > /srv/nginx/ca-certs.pem
              curl https://letsencrypt.org/certs/lets-encrypt-x1-cross-signed.pem       >> /srv/nginx/ca-certs.pem
              curl https://letsencrypt.org/certs/letsencryptauthorityx1.pem             >> /srv/nginx/ca-certs.pem
              curl https://www.identrust.com/certificates/trustid/root-download-x3.html >> /srv/nginx/ca-certs.pem
          fi

          if [ ! -e /srv/nginx/certificate.conf ]; then
              echo "
          [ req ]
          distinguished_name = req_distinguished_name
          prompt             = no

          [ req_distinguished_name ]
          O                  = Main Org.
          " > /srv/nginx/certificate.conf
          fi

          if [ ! -e /srv/nginx/certificate.key -o ! -e /srv/nginx/certificate.crt ]; then
              openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                  -keyout /srv/nginx/certificate.key \
                  -out    /srv/nginx/certificate.crt \
                  -config /srv/nginx/certificate.conf
          fi
        dest: /var/lib/cloud/scripts/per-boot/generate-ssl-certificate
        mode: 0755

    - name: NGINX SSL Certificate      | Check certificate file
      stat: path=/srv/nginx/certificate.crt
      register: certificate_file

    - name: NGINX SSL Certificate      | Generate certificate
      when: not certificate_file.stat.exists
      command: /var/lib/cloud/scripts/per-boot/generate-ssl-certificate

#    - name: Grafana                    | Check data dir
#      stat: path=/srv/grafana/grafana.db
#      register: grafana_db
#
#    - name: Grafana                    | Enable Anonymous access
#      when: not grafana_db.stat.exists
#      ini_file:
#        dest: /etc/grafana/grafana.ini
#        section: auth.anonymous
#        option: enabled
#        value: true
#
#    - name: Grafana                    | Enable Anonymous access
#      when: not grafana_db.stat.exists
#      ini_file:
#        dest: /etc/grafana/grafana.ini
#        section: auth.anonymous
#        option: org_role
#        value: Editor
#
#    - name: Grafana                    | Set snapshot server
#      when: not grafana_db.stat.exists
#      ini_file:
#        dest: /etc/grafana/grafana.ini
#        section: snapshots
#        option: external_enabled
#        value: true
#
#    - name: Grafana                    | Set snapshot server
#      when: not grafana_db.stat.exists
#      ini_file:
#        dest: /etc/grafana/grafana.ini
#        section: snapshots
#        option: external_snapshot_url
#        value: https://snapshots-g504.percona.com
#
#    - name: Grafana                    | Set snapshot server
#      when: not grafana_db.stat.exists
#      ini_file:
#        dest: /etc/grafana/grafana.ini
#        section: snapshots
#        option: external_snapshot_name
#        value: Share with Percona

    - name: supervisor                 | Fix credentials
      ini_file:
        dest: /etc/supervisord.conf
        section: supervisorctl
        option: username
        value: dummy

    - name: supervisor                 | Fix credentials
      ini_file:
        dest: /etc/supervisord.conf
        section: supervisorctl
        option: password
        value: dummy

#    - name: MySQL                      | Add includedir to MySQL config
#      lineinfile:
#        dest: /etc/my.cnf
#        line: '!includedir /etc/my.cnf.d/'
